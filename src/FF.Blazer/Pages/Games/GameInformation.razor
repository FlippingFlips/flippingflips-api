@page "/game/{id}"
@using FF.Shared.ViewModel.Games;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http

@if(Game == null){

}
else if (IsBusy)
{
    <FF.Blazer.Shared.LoadingComponents.AnimatedLoading Message="Loading game details..."/>
}
else
{
    <Microsoft.AspNetCore.Components.Web.Extensions.Head.Title Value="@($"{Game.Title} - Flipping Flips")" />

    <Container>
        <Row>
            <Column ColumnSize="ColumnSize.Is12">

                <Card Background="Background.Primary" Border="Border.Rounded">                    
                    <CardHeader>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is3">
                                <CardImage Source="@Game.Translite" Alt="/media/games/translite.jpg"></CardImage>
                            </Column>
                            <Column ColumnSize="ColumnSize.Is9">
                                <Heading Size="HeadingSize.Is2">@Game.Title</Heading>
                                <Heading Size="HeadingSize.Is5">@Game.Description</Heading>
                                <Heading Size="HeadingSize.Is6"><Span><Icon Name="IconName.FilePdf"></Icon> @Game.FileName (@Game.Version)</Span></Heading>
                                <Paragraph><Span><Icon Name="IconName.Users"></Icon> @Game.Author</Span><Span> <Icon Name="IconName.CalendarDay"></Icon> @Game.Year</Span></Paragraph>
                                <Heading Size="HeadingSize.Is6"><Span><Icon Name="IconName.FileDownload"></Icon> <Blazorise.Link To="@Game.FileUrl" TextColor="TextColor.Secondary" Target="Target.Blank">Download Original CRC: @Game.CRC</Blazorise.Link></Span></Heading>
                                <Heading Size="HeadingSize.Is6"><Span><Icon Name="IconName.FileDownload"></Icon> <Blazorise.Link To="@Game.FilePatchUrl" TextColor="TextColor.Secondary" Target="Target.Blank">Download Patch CRC: @Game.CRCPatched</Blazorise.Link></Span></Heading>
                            </Column>
                        </Row>                        
                    </CardHeader>
                    <CardBody>
                    </CardBody>
                </Card>
            </Column>
        </Row>       

        @*Datagrid of games played for this title*@
        @*<FF.Blazer.Components.GamesPlayed.GamesPlayedComponent ShowTitleFilter="false" GameId="@Game.Id"/>*@

        <Divider Margin="Margin.Is2.FromTop"/>
        <FF.Blazer.Components.Scores.ScoresComponent ShowTitleFilter="false" GameId="@Game.Id" />

    </Container>

}

@code
{
    [Parameter]
    public string Id { get; set; }

    bool IsBusy = true;

    public GameResultVm Game { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(Id))
                return;

            var opt = new System.Text.Json.JsonSerializerOptions(System.Text.Json.JsonSerializerDefaults.Web);
            Game = await Http.GetFromJsonAsync<GameResultVm>("/games/byid?id=" + Id, opt);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            IsBusy = false;
        }
    }
}
